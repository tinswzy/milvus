// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_util

import (
	context "context"

	messagespb "github.com/milvus-io/milvus/pkg/v2/proto/messagespb"
	message "github.com/milvus-io/milvus/pkg/v2/streaming/util/message"

	mock "github.com/stretchr/testify/mock"
)

// MockMsgHandler is an autogenerated mock type for the MsgHandler type
type MockMsgHandler struct {
	mock.Mock
}

type MockMsgHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMsgHandler) EXPECT() *MockMsgHandler_Expecter {
	return &MockMsgHandler_Expecter{mock: &_m.Mock}
}

// HandleCreateSegment provides a mock function with given fields: ctx, createSegmentMsg
func (_m *MockMsgHandler) HandleCreateSegment(ctx context.Context, createSegmentMsg message.SpecializedImmutableMessage[*messagespb.CreateSegmentMessageHeader, *messagespb.CreateSegmentMessageBody]) error {
	ret := _m.Called(ctx, createSegmentMsg)

	if len(ret) == 0 {
		panic("no return value specified for HandleCreateSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.SpecializedImmutableMessage[*messagespb.CreateSegmentMessageHeader, *messagespb.CreateSegmentMessageBody]) error); ok {
		r0 = rf(ctx, createSegmentMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMsgHandler_HandleCreateSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleCreateSegment'
type MockMsgHandler_HandleCreateSegment_Call struct {
	*mock.Call
}

// HandleCreateSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - createSegmentMsg message.SpecializedImmutableMessage[*messagespb.CreateSegmentMessageHeader,*messagespb.CreateSegmentMessageBody]
func (_e *MockMsgHandler_Expecter) HandleCreateSegment(ctx interface{}, createSegmentMsg interface{}) *MockMsgHandler_HandleCreateSegment_Call {
	return &MockMsgHandler_HandleCreateSegment_Call{Call: _e.mock.On("HandleCreateSegment", ctx, createSegmentMsg)}
}

func (_c *MockMsgHandler_HandleCreateSegment_Call) Run(run func(ctx context.Context, createSegmentMsg message.SpecializedImmutableMessage[*messagespb.CreateSegmentMessageHeader, *messagespb.CreateSegmentMessageBody])) *MockMsgHandler_HandleCreateSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.SpecializedImmutableMessage[*messagespb.CreateSegmentMessageHeader, *messagespb.CreateSegmentMessageBody]))
	})
	return _c
}

func (_c *MockMsgHandler_HandleCreateSegment_Call) Return(_a0 error) *MockMsgHandler_HandleCreateSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMsgHandler_HandleCreateSegment_Call) RunAndReturn(run func(context.Context, message.SpecializedImmutableMessage[*messagespb.CreateSegmentMessageHeader, *messagespb.CreateSegmentMessageBody]) error) *MockMsgHandler_HandleCreateSegment_Call {
	_c.Call.Return(run)
	return _c
}

// HandleFlush provides a mock function with given fields: flushMsg
func (_m *MockMsgHandler) HandleFlush(flushMsg message.SpecializedImmutableMessage[*messagespb.FlushMessageHeader, *messagespb.FlushMessageBody]) error {
	ret := _m.Called(flushMsg)

	if len(ret) == 0 {
		panic("no return value specified for HandleFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(message.SpecializedImmutableMessage[*messagespb.FlushMessageHeader, *messagespb.FlushMessageBody]) error); ok {
		r0 = rf(flushMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMsgHandler_HandleFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFlush'
type MockMsgHandler_HandleFlush_Call struct {
	*mock.Call
}

// HandleFlush is a helper method to define mock.On call
//   - flushMsg message.SpecializedImmutableMessage[*messagespb.FlushMessageHeader,*messagespb.FlushMessageBody]
func (_e *MockMsgHandler_Expecter) HandleFlush(flushMsg interface{}) *MockMsgHandler_HandleFlush_Call {
	return &MockMsgHandler_HandleFlush_Call{Call: _e.mock.On("HandleFlush", flushMsg)}
}

func (_c *MockMsgHandler_HandleFlush_Call) Run(run func(flushMsg message.SpecializedImmutableMessage[*messagespb.FlushMessageHeader, *messagespb.FlushMessageBody])) *MockMsgHandler_HandleFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(message.SpecializedImmutableMessage[*messagespb.FlushMessageHeader, *messagespb.FlushMessageBody]))
	})
	return _c
}

func (_c *MockMsgHandler_HandleFlush_Call) Return(_a0 error) *MockMsgHandler_HandleFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMsgHandler_HandleFlush_Call) RunAndReturn(run func(message.SpecializedImmutableMessage[*messagespb.FlushMessageHeader, *messagespb.FlushMessageBody]) error) *MockMsgHandler_HandleFlush_Call {
	_c.Call.Return(run)
	return _c
}

// HandleManualFlush provides a mock function with given fields: flushMsg
func (_m *MockMsgHandler) HandleManualFlush(flushMsg message.SpecializedImmutableMessage[*messagespb.ManualFlushMessageHeader, *messagespb.ManualFlushMessageBody]) error {
	ret := _m.Called(flushMsg)

	if len(ret) == 0 {
		panic("no return value specified for HandleManualFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(message.SpecializedImmutableMessage[*messagespb.ManualFlushMessageHeader, *messagespb.ManualFlushMessageBody]) error); ok {
		r0 = rf(flushMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMsgHandler_HandleManualFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleManualFlush'
type MockMsgHandler_HandleManualFlush_Call struct {
	*mock.Call
}

// HandleManualFlush is a helper method to define mock.On call
//   - flushMsg message.SpecializedImmutableMessage[*messagespb.ManualFlushMessageHeader,*messagespb.ManualFlushMessageBody]
func (_e *MockMsgHandler_Expecter) HandleManualFlush(flushMsg interface{}) *MockMsgHandler_HandleManualFlush_Call {
	return &MockMsgHandler_HandleManualFlush_Call{Call: _e.mock.On("HandleManualFlush", flushMsg)}
}

func (_c *MockMsgHandler_HandleManualFlush_Call) Run(run func(flushMsg message.SpecializedImmutableMessage[*messagespb.ManualFlushMessageHeader, *messagespb.ManualFlushMessageBody])) *MockMsgHandler_HandleManualFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(message.SpecializedImmutableMessage[*messagespb.ManualFlushMessageHeader, *messagespb.ManualFlushMessageBody]))
	})
	return _c
}

func (_c *MockMsgHandler_HandleManualFlush_Call) Return(_a0 error) *MockMsgHandler_HandleManualFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMsgHandler_HandleManualFlush_Call) RunAndReturn(run func(message.SpecializedImmutableMessage[*messagespb.ManualFlushMessageHeader, *messagespb.ManualFlushMessageBody]) error) *MockMsgHandler_HandleManualFlush_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSchemaChange provides a mock function with given fields: ctx, schemaChangeMsg
func (_m *MockMsgHandler) HandleSchemaChange(ctx context.Context, schemaChangeMsg message.SpecializedImmutableMessage[*messagespb.SchemaChangeMessageHeader, *messagespb.SchemaChangeMessageBody]) error {
	ret := _m.Called(ctx, schemaChangeMsg)

	if len(ret) == 0 {
		panic("no return value specified for HandleSchemaChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.SpecializedImmutableMessage[*messagespb.SchemaChangeMessageHeader, *messagespb.SchemaChangeMessageBody]) error); ok {
		r0 = rf(ctx, schemaChangeMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMsgHandler_HandleSchemaChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSchemaChange'
type MockMsgHandler_HandleSchemaChange_Call struct {
	*mock.Call
}

// HandleSchemaChange is a helper method to define mock.On call
//   - ctx context.Context
//   - schemaChangeMsg message.SpecializedImmutableMessage[*messagespb.SchemaChangeMessageHeader,*messagespb.SchemaChangeMessageBody]
func (_e *MockMsgHandler_Expecter) HandleSchemaChange(ctx interface{}, schemaChangeMsg interface{}) *MockMsgHandler_HandleSchemaChange_Call {
	return &MockMsgHandler_HandleSchemaChange_Call{Call: _e.mock.On("HandleSchemaChange", ctx, schemaChangeMsg)}
}

func (_c *MockMsgHandler_HandleSchemaChange_Call) Run(run func(ctx context.Context, schemaChangeMsg message.SpecializedImmutableMessage[*messagespb.SchemaChangeMessageHeader, *messagespb.SchemaChangeMessageBody])) *MockMsgHandler_HandleSchemaChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.SpecializedImmutableMessage[*messagespb.SchemaChangeMessageHeader, *messagespb.SchemaChangeMessageBody]))
	})
	return _c
}

func (_c *MockMsgHandler_HandleSchemaChange_Call) Return(_a0 error) *MockMsgHandler_HandleSchemaChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMsgHandler_HandleSchemaChange_Call) RunAndReturn(run func(context.Context, message.SpecializedImmutableMessage[*messagespb.SchemaChangeMessageHeader, *messagespb.SchemaChangeMessageBody]) error) *MockMsgHandler_HandleSchemaChange_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSwitchMQ provides a mock function with given fields: switchMqMsg, vchannel
func (_m *MockMsgHandler) HandleSwitchMQ(switchMqMsg message.SpecializedImmutableMessage[*messagespb.SwitchMQMessageHeader, *messagespb.SwitchMQMessageBody], vchannel string) error {
	ret := _m.Called(switchMqMsg, vchannel)

	if len(ret) == 0 {
		panic("no return value specified for HandleSwitchMQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(message.SpecializedImmutableMessage[*messagespb.SwitchMQMessageHeader, *messagespb.SwitchMQMessageBody], string) error); ok {
		r0 = rf(switchMqMsg, vchannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMsgHandler_HandleSwitchMQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSwitchMQ'
type MockMsgHandler_HandleSwitchMQ_Call struct {
	*mock.Call
}

// HandleSwitchMQ is a helper method to define mock.On call
//   - switchMqMsg message.SpecializedImmutableMessage[*messagespb.SwitchMQMessageHeader,*messagespb.SwitchMQMessageBody]
//   - vchannel string
func (_e *MockMsgHandler_Expecter) HandleSwitchMQ(switchMqMsg interface{}, vchannel interface{}) *MockMsgHandler_HandleSwitchMQ_Call {
	return &MockMsgHandler_HandleSwitchMQ_Call{Call: _e.mock.On("HandleSwitchMQ", switchMqMsg, vchannel)}
}

func (_c *MockMsgHandler_HandleSwitchMQ_Call) Run(run func(switchMqMsg message.SpecializedImmutableMessage[*messagespb.SwitchMQMessageHeader, *messagespb.SwitchMQMessageBody], vchannel string)) *MockMsgHandler_HandleSwitchMQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(message.SpecializedImmutableMessage[*messagespb.SwitchMQMessageHeader, *messagespb.SwitchMQMessageBody]), args[1].(string))
	})
	return _c
}

func (_c *MockMsgHandler_HandleSwitchMQ_Call) Return(_a0 error) *MockMsgHandler_HandleSwitchMQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMsgHandler_HandleSwitchMQ_Call) RunAndReturn(run func(message.SpecializedImmutableMessage[*messagespb.SwitchMQMessageHeader, *messagespb.SwitchMQMessageBody], string) error) *MockMsgHandler_HandleSwitchMQ_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMsgHandler creates a new instance of MockMsgHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMsgHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMsgHandler {
	mock := &MockMsgHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
